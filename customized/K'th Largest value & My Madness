#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable" 
#pragma GCC diagnostic ignored "-Wformat"
#pragma GCC diagnostic ignored "-Wsign-compare"
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;

#define ll long long
#define pb push_back
#define all(x) x.begin(),x.end()
#define dhoom3   ios::sync_with_stdio(0);cin.tie(0); cout.tie(0);
template <typename T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
/*ordered_set<ll> s;
*s.find_by_order(x) //ans at x index in sorted order.
s.order_of_key(x); //index of x or if not find x , it show index no in sort array.*/

const int N= 2e6+5;
ll n,q;
/////
const ll INF =1e18;

//Segment tree(1 based)
struct fun{
  ll sum,max,min;
};
fun merge(fun a, fun b){
  fun c;
  c.sum = a.sum + b.sum ;
  return c;
}
ll a[N];
fun b[4*N];

void build(ll l, ll r, ll node){  //(left_range, right_range, cur_node)
  if(l == r){
    b[node].sum = a[l];
    return;
  }
  ll mid = (l + r)/2;
  ll n1 = 2*node;
  ll n2 = n1 + 1;
  build(l, mid , n1);
  build(mid+1, r, n2);
  b[node] = merge(b[n1] , b[n2]);
  return;
}
 
fun dummy(){
  return {0,0,INF};
}
 
fun query(ll l, ll r, ll node, ll x, ll y){ 
  if(y < l || x > r) return dummy();
  if(x <= l && y >= r) return b[node];
  ll mid = (l + r)/2;
  ll n1 = 2*node;
  ll n2 = n1 + 1;
  return merge(query(l , mid , n1 , x , y) , query(mid+1 , r , n2 , x , y));
}
//point update
void up(ll l, ll r, ll node, ll x, ll v){ 
  if(x < l || x > r) return;
  if(l == r){
    b[node].sum = v;
    // b[node].max = v;
    // b[node].min = v;
    return;
  }
  ll mid = (l + r)/2;
  ll n1 = 2*node;
  ll n2 = n1 + 1;
  up(l, mid , n1, x , v);
  up(mid+1, r, n2 , x , v);
  b[node] = merge(b[n1] , b[n2]);
}
//////

int main(){
   dhoom3; 
   int Test=1;
   cin>>Test;
   for(ll tt=1;tt<=Test;tt++){
          ll jog=0;
       cin>>n>>q;
       for(ll i=1;i<=n;i++) {
           a[i]=0;
       }
       jog=n;
       for(ll i=1;i<=n;i++){
            ll ind; cin>>ind;
            a[ind]++; 
       }
       build(1,n,1);
       for(ll i=0;i<q;i++){
           ll t; cin>>t;
            if(t==1){
                ll u,v; cin>>u>>v;
                if(u==v) continue;
                up(1,n,1,u,0);
                a[v]+=a[u],a[u]=0;
                up(1,n,1,v,a[v]);
            }
            else if(t==2){
                ll u,x; cin>>u>>x;
                jog+=x;
                a[u]+=x;
                up(1,n,1,u,a[u]);
            }
            else{
                ll k; cin>>k;
                if(k>b[1].sum){
                    cout<<-1<<endl;
                     continue;
                }
                ll l=1,r=n,cur=1;
                while(l<r){
                    ll mid=(l+r)/2;
                   ll lft=cur*2,rght=cur*2+1;
                   if(b[lft].sum>=k){
                        r=mid;
                        cur=lft;
                   }
                   else{
                        k-=b[lft].sum;
                        l=mid+1;
                        cur=rght;
                   }
                }
                cout<<l<<endl;              
            }
       }
       
    
   }
   //cout << (ans ? "YES\n" : "No\n") ;
   return 0;
}
/*

*/
